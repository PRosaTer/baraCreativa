import { useState } from "react";
import { useRouter } from "next/navigation";
import Swal from "sweetalert2";

const API_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3001";

interface DatosInicioSesion {
    correo: string;
    contrasena: string;
}

interface DatosRegistro {
    nombreCompleto: string;
    correoElectronico: string;
    contrasena: string;
    numeroTelefono: string;
    tipoUsuario: "Alumno" | "Empresa";
    nombreEmpresa: string;
    fotoPerfil: string;
    confirmContrasena: string;
}

export const useAutenticacion = () => {
    // Estado para inicio de sesión
    const [datosInicioSesion, setDatosInicioSesion] = useState<DatosInicioSesion>({
        correo: "",
        contrasena: "",
    });

    // Estado para registro
    const [datosRegistro, setDatosRegistro] = useState<DatosRegistro>({
        nombreCompleto: "",
        correoElectronico: "",
        contrasena: "",
        numeroTelefono: "",
        tipoUsuario: "Alumno",
        nombreEmpresa: "",
        fotoPerfil: "",
        confirmContrasena: "",
    });

    const router = useRouter();

    // Manejar cambios para inicio de sesión
    const manejarCambioInicioSesion = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setDatosInicioSesion((prev) => ({ ...prev, [name]: value }));
    };

    // Manejar cambios para registro
    const manejarCambioRegistro = (
        e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
    ) => {
        const { name, value } = e.target;
        setDatosRegistro((prev) => ({ ...prev, [name]: value }));
    };

    // Validar contraseña
    const validarContrasena = (contrasena: string) => {
        const regexContrasena =
            /^(?=.*[A-Z])(?=.*[!@#$%^&])(?=.*\d)(?=.*[a-zA-Z]).{8,}$/;
        return regexContrasena.test(contrasena);
    };

    // Validar correo
    const validarCorreo = (correo: string) => {
        const regexCorreo = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return regexCorreo.test(correo);
    };

    // Manejar inicio de sesión
    const manejarInicioSesion = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();

        try {
            const respuesta = await fetch(`${API_URL}/auth/signin`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(datosInicioSesion),
            });

            if (respuesta.status === 201) {
                const datos = await respuesta.json();

                localStorage.setItem("usuario", JSON.stringify(datos.user));
                localStorage.setItem("token", datos.token);

                Swal.fire({
                    icon: "success",
                    title: "Inicio de sesión exitoso",
                    text: `¡Bienvenido, ${datos.user.email}!`,
                    confirmButtonColor: "#3085d6",
                });

                const rol = datos.user.role;
                if (rol === "admin" || rol === "owner") {
                    router.push("/adminProfile");
                } else if (rol === "user") {
                    router.push("/profile");
                }
                return;
            }

            throw new Error("Credenciales incorrectas");
        } catch {
            Swal.fire({
                icon: "error",
                title: "Error",
                text: "Credenciales incorrectas. Verifica tu correo y contraseña.",
                confirmButtonColor: "#d33",
            });
        }
    };

    // Manejar registro
    const manejarRegistro = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();

        const {
            nombreCompleto,
            correoElectronico,
            contrasena,
            confirmContrasena,
            numeroTelefono,
            tipoUsuario,
            nombreEmpresa,
            fotoPerfil,
        } = datosRegistro;

        if (nombreCompleto.length < 4) {
            Swal.fire({
                icon: "error",
                title: "Error",
                text: "El nombre completo debe tener al menos 4 caracteres.",
                confirmButtonColor: "#d33",
            });
            return;
        }

        if (!validarCorreo(correoElectronico)) {
            Swal.fire({
                icon: "error",
                title: "Error",
                text: "Por favor, introduce un correo electrónico válido.",
                confirmButtonColor: "#d33",
            });
            return;
        }

        if (!validarContrasena(contrasena)) {
            Swal.fire({
                icon: "error",
                title: "Error",
                text: "La contraseña debe tener al menos 8 caracteres, incluyendo una mayúscula, un carácter especial y un número.",
                confirmButtonColor: "#d33",
            });
            return;
        }

        if (contrasena !== confirmContrasena) {
            Swal.fire({
                icon: "error",
                title: "Error",
                text: "Las contraseñas no coinciden.",
                confirmButtonColor: "#d33",
            });
            return;
        }

        const datosAEnviar = {
            nombre_completo: nombreCompleto,
            correo_electronico: correoElectronico,
            contrasena,
            numero_telefono: numeroTelefono,
            tipo_usuario: tipoUsuario,
            nombre_empresa: tipoUsuario === "Empresa" ? nombreEmpresa : null,
            fecha_registro: new Date().toISOString(),
            foto_perfil: fotoPerfil || null,
        };

        try {
            const respuesta = await fetch(`${API_URL}/usuarios`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(datosAEnviar),
            });

            if (!respuesta.ok) {
                const errorData = await respuesta.json();
                Swal.fire({
                    icon: "error",
                    title: "Error",
                    text:
                        errorData.message ||
                        "Error al registrar al usuario. Intenta de nuevo más tarde.",
                    confirmButtonColor: "#d33",
                });
                return;
            }

            Swal.fire({
                icon: "success",
                title: "Éxito",
                text: "Usuario registrado exitosamente",
                confirmButtonColor: "#3085d6",
            }).then(() => {
                router.push("/login");
            });
        } catch {
            Swal.fire({
                icon: "error",
                title: "Error",
                text: "No se pudo conectar con el servidor. Verifica tu conexión o intenta más tarde.",
                confirmButtonColor: "#d33",
            });
        }
    };

    return {
        datosInicioSesion,
        datosRegistro,
        manejarCambioInicioSesion,
        manejarCambioRegistro,
        manejarInicioSesion,
        manejarRegistro,
    };
};